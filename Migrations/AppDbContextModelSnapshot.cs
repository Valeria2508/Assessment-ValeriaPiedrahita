// <auto-generated />
using System;
using Assessment_ValeriaPiedrahita.data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assessment_ValeriaPiedrahita.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Assessment_ValeriaPiedrahita.models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.Property<int>("MedicalHistorialId")
                        .HasColumnType("int")
                        .HasColumnName("medical_historial_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalHistorialId");

                    b.HasIndex("PatientId");

                    b.ToTable("appointment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 11, 18, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            MedicalHistorialId = 1,
                            PatientId = 1,
                            Reason = "Consulta de control"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 11, 19, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            MedicalHistorialId = 2,
                            PatientId = 2,
                            Reason = "Dolor de cabeza persistente"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2024, 11, 20, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            MedicalHistorialId = 3,
                            PatientId = 3,
                            Reason = "Chequeo preventivo"
                        });
                });

            modelBuilder.Entity("Assessment_ValeriaPiedrahita.models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("end_time");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("first_name");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Identification_number");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("password");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("specialization");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.ToTable("doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "carlos.gomez@example.com",
                            EndTime = new TimeOnly(16, 0, 0),
                            First_Name = "Carlos",
                            IdentificationNumber = "D1234567",
                            Last_Name = "Gomez",
                            Password = "password123",
                            Specialization = "Cardiologist",
                            StartTime = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            Email = "ana.martinez@example.com",
                            EndTime = new TimeOnly(17, 0, 0),
                            First_Name = "Ana",
                            IdentificationNumber = "D2345678",
                            Last_Name = "Martinez",
                            Password = "password456",
                            Specialization = "Neurologist",
                            StartTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            Email = "juan.perez@example.com",
                            EndTime = new TimeOnly(15, 30, 0),
                            First_Name = "Juan",
                            IdentificationNumber = "D3456789",
                            Last_Name = "Perez",
                            Password = "password789",
                            Specialization = "General Surgeon",
                            StartTime = new TimeOnly(7, 30, 0)
                        });
                });

            modelBuilder.Entity("Assessment_ValeriaPiedrahita.models.MedicalHisorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("allergies");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("details");

                    b.Property<string>("Diagnoses")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("diagnoses");

                    b.Property<string>("Medications")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("medications");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("medical_hisotials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergies = "Ninguna",
                            CreatedDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Details = "Consulta de control anual.",
                            Diagnoses = "Hipertensión",
                            Medications = "Atenolol",
                            PatientId = 1
                        },
                        new
                        {
                            Id = 2,
                            Allergies = "Alergia al polen",
                            CreatedDate = new DateTime(2024, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Details = "Control y seguimiento de niveles de glucosa.",
                            Diagnoses = "Diabetes Tipo 2",
                            Medications = "Metformina",
                            PatientId = 2
                        },
                        new
                        {
                            Id = 3,
                            Allergies = "Alergia a los mariscos",
                            CreatedDate = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Details = "Receta para inhalador y seguimiento.",
                            Diagnoses = "Asma",
                            Medications = "Salbutamol",
                            PatientId = 3
                        });
                });

            modelBuilder.Entity("Assessment_ValeriaPiedrahita.models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("first_name");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Identification_number");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1985, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carlos.gomez@example.com",
                            First_Name = "Carlos",
                            IdentificationNumber = "AB1234567",
                            Last_Name = "Gomez",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1990, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ana.martinez@example.com",
                            First_Name = "Ana",
                            IdentificationNumber = "XY9876543",
                            Last_Name = "Martinez",
                            Password = "password456"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1978, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "juan.perez@example.com",
                            First_Name = "Juan",
                            IdentificationNumber = "KL1122334",
                            Last_Name = "Perez",
                            Password = "password789"
                        });
                });

            modelBuilder.Entity("Assessment_ValeriaPiedrahita.models.Appointment", b =>
                {
                    b.HasOne("Assessment_ValeriaPiedrahita.models.Doctor", "Doctors")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment_ValeriaPiedrahita.models.MedicalHisorial", "MedicalHistorials")
                        .WithMany()
                        .HasForeignKey("MedicalHistorialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment_ValeriaPiedrahita.models.Patient", "Patients")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctors");

                    b.Navigation("MedicalHistorials");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Assessment_ValeriaPiedrahita.models.MedicalHisorial", b =>
                {
                    b.HasOne("Assessment_ValeriaPiedrahita.models.Patient", "Patients")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
